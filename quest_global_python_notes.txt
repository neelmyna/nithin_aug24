QUEST GLOBAL PYTHON TRAINING

Day1 Tuesday 30-07-2024

S/W Installation:
1. notepad++
G serach: download notepad++
https://notepad-plus-plus.org/downloads/
version: 8.6.7

2. vs code
G search: download VS Code
https://code.visualstudio.com/download
Select the OS and download the installer file (.msi file)

3. python
G search: download python
https://www.python.org/downloads/
Select the OS and download the installer file (.msi file)
version 3.12.4

Create a folder named "software" in C drive
Now create the folders "python", "notepad_pp", "vs_code" inside the software folder.

Now, cut and paste the installer files from "downloads" folder into the respective folders in side C:\software 

After the installer files are stored in their respective folders, then double click and install them. 
---------------------------------------------
Go to D drive (or C drive), nothing but where your learning content is present,
create a new folder named "python_learning"

Python is installed here:
C:\Users\ASUS\AppData\Local\Programs\Python\Python311>
---------------------------------------------------------
PROBLEM SOLVING STEPS:

1. UNDERSTAND THE PROBLEM. Write the down the required data and information. Isolate and remove the unwanted data and information.
Also assertain/decide/infer the O/P of the problem.
OUTCOME: The hidden Direct Question in the given problem statement we get. (The given problem may be story kind or real life scenario)

2. FIND THE SOLUTION using mathematically or trial and error or using any specific formula or known technique.
OUTCOME: You have a clear idea of the solution for the given problem (which we may be implementable)

3. WRITE THE ALOGRITHM: An algorithm is a step by step procedure to solve an ATOMIC problem.
Each step of the algorithm, must be atomic, descriptive and finite.
OUTCOME: You have all the instructions/steps/statements of the solution.

4. PSEUDOCODE: Write the FakeCode:
Advantage of writing the pseudocode is that, it looks like a code written in some language.
OUTCOME: You have a solution which you can test (Test it using flow chart or some testing tool or de-bugger, Testing means, Tracing the logic)

5. CODE THE SOLUTION: using the language syntax (Python or Java or C++ or C or C# or R)
OUTCOME: The basic App/Program is ready

6. STATISFY THE CONSTRAINTS: Read the constraints and go back to the code and add the required conditions that check the data to be in required range.

7. OPTIMIZE THE SOLUTION: The code efficiency, readabality and maintainability must be good. Hence, Allign the code to follow the development standards.
------------------------
1. Check if a character is a digit.

Every character in every language belongs to a specific character set.
The older but widely used character set is ASCII which has 256 characters and every character is of one byte in size.
256 characters were insufficient. Hence UNICODE character set was introduced which is used by languages like Java, Python, Modern C++, C# etc. However, the 1st 256 Unicode characters are the ASCII characters. All the characters have respective(unique) values.
The unicode/ascii values of the digits which are stored as characters in memory have their values starting from 48 to 57. That is the character '0' has value 48, '1' has 49 and '2' has 50 and so on upto '9' with value 57.

CH = '2' here 2 is stored in CH as a character
NUM = 2  here 2 is stored in NUM as a number

Algorithm:
1. Read a character say CH
2. check if CH >= 48 and CH <= 57
Alternatively, we can also check: CH >= '0' and CH <= '9'
if yes: Print 'given character is a digit'
else: 	Print 'given character is not a digit'

NOTE:
We cannot use strings as integers in Python. If we try to do so, we get "TypeError" which is runtime error.

ValueError: If we try to convert a data into another type which is not possible. Example, trying to convert 'abc' into int()

Python Solution:
print('Enter a character to chekc if it is a digit')
ch = input()
if ch >= '0' and ch <= '9':
    print('given character is a digit')
else:
    print('given character is Not a digit')
------------------------------------------------------
2. Check if a number is Perfect square

45		6.76	6		36
121		11.0	11		121
Algorithm:
Read the input number N
Find Root of N and store it a variable ROOT
Now find the Floor of ROOT and store it in INT_ROOT
Now check if INT_ROOT * INT_ROOT is equal to N
If yes: print N is P S
else  : print N is not a P S

floor() It removes/truncates the decimal part if any.

round() If the decimal part is 0.5 or more then next integer number is returned, else the decimal part is truncated.

ciel() Returns the next integer number if the decimal part of the number is anything other than .0
So ciel(7.000001) is 8.

NOTE: All the above 3 functions return an integer.
--------------------------------------------------------------
Assignment Question:
What is open interval and closed interval

What is Data ?
Data is some information which has an implicit meaning and it is worth storing. 

Give a name to the below set:
{sky, needle, fever, transistor, webcam, biology, grass, point, her, mammle}

Give a name to the below set:
{Tiruvanantapuram, Chennai, Bengaluru, Amaravati, Panjim}

places/locations
cities
data
capital cities
capital cities of southern states of India

Types of data?
How we can classify the data ?

w.r.t. Data Types:
numeric
boolean
string
multimedia data (images, video, audio, gif etc)

w.r.t. nature of the data:
qlalitative and quantitative data

Numeric:
	number (int, long, short, byte, tinyint, smallint, bigint)
	number with precision (float and double)
string
	alphabetic (name of a place or person)
	alphanumeric (number of a vehicle, USN of a student etc)
	
In Pallakkad NSS college:
The college every year filicitates a topper and only one and always.

Assume, 4 students got the top score 97. Now the college is in confusion what to do! Because there is no single topper.
So they sent to re-correction and gave these instructions to the evaluator:
1. If you find any grammer mistake (missing punctuations) or scratches done or not a good explanation, etc then you can remove 0.5 marks.
2. If you find the answer is very good and good readabality etc, then give extra 0.5 marks.
3. Any addition or deduction of marks can be done only 2 times.

Thus after re-correction,
s1 got bonus 0.5 and now the score is 97.5
s2 got 2 times deduction and hence 1 mark reduced and score is 96
s3 got 1 time deduction and new score is 96.5
s4 remained with 97 because there was no changes.

So, now the college NSS can declare the topper.
What helped the college to do so?
It is the decimal part of the number. And hence the decimal part of a number is not part of the, rather it is mentions the accuracy/precision of the number.
------------------------------------------
ARITHMETIC OPERATORS:
+  -  *  /  % 
Additions in Python:  // **

All the arithmetic operators are binary operators.
The operator is always placed in between the operands, i.e. we must use the INFIX NOTATION syntax only.
oprnd1 oprnd2 * (postfix notation)
+ oprnd1 prnd2  (prefix notation)
oprnd1 - oprnd2 (Infix notation)
The + and - operators have LESSER PRECEDENCE than * / and %
This rule is called as BRODMAS RULE.
Associtivity: The Arithmetic expression is always solved Left to Right.
Arithmetic operators have Left to Right associtivity.
x + y % z
The modulo operation must happen 1st. Then the remainder number is added to x.
However, the expression is read from left, that is we read 'x' first.
Hence, all Arithmetic expressions are solved only after converting the Programmer/user written Infix expression into postfix and then the expression io solved.
The i/p are numbers and The o/p is a number
NOTE: The way integers are stored and the way floating point numbers are stored are different.

+ve integers are stored only by impleting the algorithm to convert decimal/octal/hexa-decimal numbers into binary.

-ve numbers: The 2s compliment of the number is stored in memory.

float/double: IEEE standard formula is used to store the number.

And hence, when an Arithmetic operation happens, the Data Type of both the operands must be same. If not, one of the 2 operands is implicitly type casted.

TYPE CASTING:
Conversion of the DT of a value (usually a number) to another.
Explicit Casting: When the programmer adds the code(syntax) for the cast to happen:
var = '10.5'
num = float(var) 
Above is an example of Casting. Where we are converting a string into an integer number.
var = 10.5
num = int(var)
Here we are explicitly casting float data into int data.
Note that the decimal part (precision) is lost. Hence it is called as DOWN CAST.
When ever we cast a lower sized data type value into a higher sized data type value, then it is called as UP CAST.

var = 10.5
num = var // This is implicit down cast

w.r.t. C/C++/Java
int num1 = 25;
double d = num; // This is implicit up cast
int num2 = int(d); // This explicit down cast

NOTE: In Python, there is no IMPLICIT CAST.
num = input()
Expecting to read a number data in the above statement will result in error, because input() always returns a string.

NOTE: In all languages, the read and write functions like printf() scanf() gets() puts() input() prompt() cin and cout, readline() etc etc. all Accept/get string from the OS and what they have to send to the o/p device to via the OS is also string data only.
------------------------------------
RELATIONAL OPERATORS:
< > == != >= <=
All the operators are binary operators
The i/p are numbers and o/p is boolean
infix notation is used
Relational operators have Lesser precedence than Arithmetic operators.
Associtivity: Left to Right

What ever we right using <= or >= can also be written using < and > respectively.
For example:
for(int i = 1; i <= 20; i++)
can be written as:
for(int i = 1; i < 21; i++)
So, the operands >= and <= look redundant. But they are not. Why ?

In Math, we have concept:
(10, 30) Open interval, where the end values are excluded:
So the range is: 11 to 29
if(value > 10 and value < 30)
[20, 50] Closed Interval, where the end values are included:
So the range is: 20 to 50
if(value >= 10 and value <= 30)
(25, 75] Left Open, where the left end value is excluded.
So the range is: 26 to 75
if(value > 25 and value <= 75)

Hence they are not redundant because, programming is a sub set of Math, and it must implement every rule of Mathematics.
---------------------------
Logical Operators:
w.r.t. C/C++/Java/C#
& && | || !
w.r.t. Python:
and or not
i/p are boolean and o/p is boolean
We write: true and true

Python Language Characteristics:
-> Python is an Interpreted language and not a compiled language.
-> The code is taken by the interpretor, and each instruction is
Compiled -> Interpreted -> Run
-> In Python the DT of a variable is set dynamically and hence we need not mention the DT of a variable, rather start using it.
-> In Python everything is an Object including the functions.
-> Thus we can add properties to the object which are useful during development.
-> Python syntax is very easy to use and the language is developed such that the code is very compact and highly abstract.
-> The trade-off with Python is that, it is slower compared with Java during the runtime and very slow compared with C/C++ runtime.
-> Python is very suitable for building Apps that are developed on RAD sdlc.
-> Since it is easier and faster to develop in Python, lot of Modules are built for various domains and programming dimensions like Web App development (Django and Flask), for data analytics(science), we have numpy, pandas and for data visualization we have matplotlib etc. (List is very long)
-> Python give us buint in data structures like:
list: mutable and ordered (can be indexed)
set: immutable and unordered (cannot be indexed)
tuple: immutable and ordered
dictionary: key-value pairs (mutable and ordered)
Along with the above, string type is implemented and all these have good amount of methods to perform various operations.
-> Python allows us to use the Ordered DS with negetive indexing.
-> We can create a list of lists or lists with elements that are of different types such as set, dictionary, string etc.
-> We have the list comprehension, map method and lambda expressions and also regex which allows us to develop code for complex problems.
-> Pethora of modules like sys, math, pickle and so many of them that helps us to develop code very fast.
-------------------------
UNIQUE PYTHON FEATURES:
-> There is no function overloading in Python
-> Python allows us to develop code in OOP. But it is implicitly not a strict OOPL like Java.
-> We should know the difference between @static method and @class method
-> We must know as many methods that start with double underscore and ends with double underscore
__new__()
__init__()
__add__()

-----------------------------------------
num2 = 235
print('Num2 = ' + str(num2) + ' is smallest') # Here we are explicitly appending/concatinating a string to another.

print('Num2 = ', num2, ' is smallest') # Here, the num2 will be implicitly converted to string and the appending/concatination happens implicitly.

# In the above code snippet, the str(num2) is to CAST the 'int' data into 'str' data. Note that in Python, there is no Implicit Type Conversion.
--------------------------
Program3: small_of_two_nums.py

num1 = 7 # 7 here is an int literal (constant/fixed value)
num2 = 5

if num1 < num2:
    print('Num1 = ', num1, ' is smallest')
else:
    print('Num2 = ' + str(num2) + ' is smallest')
----------------------------------------------
Day2: Wednesday 31-07-2024

p5.
Accept the average score from the user (integer) and print the result as follows:
0  to 49		Fail
50 to 74		second class
75 to 90		frist class
91 to 100		distinction
Also check for the invalid i/p.

average_score = int(input('Enter your average score to print the result: '))
if (average_score >= 0 and average_score <= 49):
    print('Result is Fail')
elif( average_score <=74):
    print('Result is Second class')
elif(average_score <= 90):
    print('Result is First class')
elif(average_score <= 100):
    print('Result is Distinction')
else:
    print('Invalid input enetered')
--------------------------------------------------
SWITCH CASE:
1. Accept the food item number from the user and serve him the food.

#Accept the food item number from the user and serve him the food.

food_items = {
    1 : 'Mysuru Filter Coffee',
    2 : 'Yummy Idly-vada',
    3 : 'Worlds soft Mysuru Mailari Dosa',
    4 : 'Bhupal Special Poha',
    5 : 'Bengaluru tamato-peanuts Upama'
}
print('Welcome to our hotel Rameshwaram Cafe')
print('1:Coffee 2:Idly-Vada 3:Dosa 4:Poha 5:Upama')
food_item_number = int(input('Enter the food item number that you wish:'))
if food_item_number < 1 or food_item_number > 5:
    print('Invalid choice entered')
else:
    print('Your ' + food_items.get(food_item_number) + ' is here')
print('Thank you, Visit again')
--------------------------------------------------
2. Accept the food type (veg or non-veg) from the user and then prompt her for the food item number and serve her the food.

#Accept the food item number from the user and serve him the food.
import sys

veg_food_items = {
    1 : 'Mysuru Filter Coffee',
    2 : 'Yummy Idly-vada',
    3 : 'Worlds soft Mysuru Mailari Dosa',
    4 : 'Bhupal Special Poha',
    5 : 'Bengaluru tamato-peanuts Upama'
}
non_veg_food_items = {
    1 : 'Egg Pokoda',
    2 : 'Chicken Biryani',
    3 : 'Fish Fry',
    4 : 'Mutton Masala'
}
food_types = {
    1 : veg_food_items,
    2 : non_veg_food_items
} 
food_items = {
    1 : '1:Coffee 2:Idly-Vada 3:Dosa 4:Poha 5:Upama',
    2 : '1:Egg Pokoda 2:Chicken Biryani 3:Fish Fry'
}

print('Welcome to our hotel The Taste')
user_choice = int(input('1:Veg 2:Non-Veg \t Your choice please: ')) 
items = food_items.get(user_choice, 'Invalid')
if items == 'Invalid':
    sys.exit('Invalid choice entered')
print(items)
food_item_number = int(input('Enter the food item number that you wish:'))

print('Your ' + food_types.get(user_choice).get(food_item_number) + ' is here')

print('Thank you, Visit again')
--------------------------------------------------
3. Repeat the problem 2 for multiple orders. In each order the customer will order one food item only.

#Accept the food item number from the user and serve him the food.
import sys

veg_items = {
    1 : 'Mysuru Filter Coffee',
    2 : 'Yummy Idly-vada',
    3 : 'Worlds soft Mysuru Mailari Dosa',
    4 : 'Bhupal Special Poha',
    5 : 'Bengaluru tamato-peanuts Upama'
}
nonveg_items = {
    1 : 'Egg Pokoda',
    2 : 'Chicken Biryani',
    3 : 'Fish Fry',
    4 : 'Mutton Masala'
}
food_types = {
    1 : veg_items,
    2 : nonveg_items
}
food_menu = {
    1 : '1:Coffee 2:Idly-Vada 3:Dosa 4:Poha 5:Upama',
    2 : '1:Egg Pokoda 2:Chicken Biryani 3:Fish Fry'
}

print('Welcome to our hotel The Taste')
while True:
    user_choice = int(input('1:Veg 2:Non-Veg \t Your choice please: ')) 
    items = food_menu.get(user_choice, 'Invalid')
    if items == 'Invalid':
        print('Invalid choice entered')
        break
    print(items)
    food_item_number = int(input('Enter item number that you wish have:'))

    print('Your ' + food_types.get(user_choice).get(food_item_number) + ' is here')
    user_choice = int(input('Do you wish to have more: Press 1 if yes: '))
    if user_choice != 1:
        break
print('Thank you, Visit again')
------------------------------------------------------
GitHub:

1. Create git hub account. Verify with the OTP sent to your email.
2. Generate PAT.
	my_icon -> seetings -> developer settings -> create personal access token -> classic -> select Repo and 2 other options
3. Copy and save the PAT in a file and save the file in C:\software folder.
4. Now download and install git.
5. Now, go into your working folder and open the command prompt.
6. Go to your repository that you just created, and copy the URL.
Example: https://www.gihub.com/nithin/quest_python
6. Run the command:
	$> git close https://www.PAT@gihub.com/nithin_n/quest_python
	PAT here is the personal access token
7. Now run the commands:
	git config --global user.name "nithin_n"
	git config --global user.email "mtd.nithin@gmail.com"
8. Now, open the VS code from the working folder.
	You can see a folder with your repo name
9. When ever we do any changes to the repo (adding or deleteing or modyfying files and folder), we must click on the version_control icon in VS code (Left most corner 3rd vertical icon). Now, in the message box, add the relevant message (day2 notes and programs are added) and click on COMMIT button. Next, click on the SYNC button and then click OK when you are prompted.
------------------------------------------------------
Program to count the number of digits in a number
10) 145 (14
       140
           5
145 // 10    Integer division (Quotient is always int)

10) 145 (14.5
       140
            50
            50
145 / 10    Floating point division

# Program to count the number of digits in a number

input_number = int(input('Enter a number to count number of digits in it: '))

count_of_digits = 0
temp_number = input_number

while temp_number != 0:
    temp_number = temp_number // 10
    count_of_digits += 1

print(f'Number of digits in {input_number} is {count_of_digits}')

inp=3475
temp=3475
c=0

i=1
temp=347
c=1

i=2
temp=34
c=2

i=3
temp=3
c=3

i=4
temp=0
c=4

O/P: Number of digits in 3475 is 4

Alternate and easy solution:
input_number = int(input('Enter a number to count number of digits in it: '))

count_of_digits = len(str(input_number))

print(f'Number of digits in {input_number} is {count_of_digits}')
------------------------------------------------------
# Program to find sum of digits in of number

input_number = int(input('Enter a number to find sum of digits in it: '))

sum_of_digits = 0
temp_number = input_number

while temp_number != 0:
    remainder_digit = temp_number % 10
    temp_number = temp_number // 10
    sum_of_digits += remainder_digit

print(f'Sum of digits in {input_number} is {sum_of_digits}')

Alternate solution:
input_number = int(input('Enter a number to find sum of digits in it: ')) # read a number and store it as an integer

numbers = [int(char) for char in str(input_number)] # convert the number into string and read character by character from the string using for loop and then convert each of the character to integer and store it in the list.

print(numbers) # Print the list of numbers

print(f'Sum of digits of {input_number} is {sum(numbers)}') # The sum() finds sum of the elements of the list
------------------------------------------------------
Program to count the number of Odd digits in a number


------------------------------------------------------
Program to accept number of lines of the Triangle and draw the Trianlge:
*
**
***
****
*****

number_of_lines = int(input('Enter number of lines of the Triangle: '))

for i in range(1, number_of_lines+1):
    print('*' * i)
----------------------------------------------------------
range() function in Python:

The range function can be used in many ways:

range(10)
The start value is 0, end value is 9, increment is +1

range(1, 11)
The start value is 1, end value is 10, increment is +1

range(2, 20, 3)
The start value is 2, end value is less than 20, increment is +3

range(25, 2, -2)
The start value is 25, end value is greater than 2, increment is -2 which is nothing but, decrement of 2

Nithin Trainer Repo: https://github.com/neelmyna/nithin_aug24
-----------------------------------------------------
DAY3 THURSDAY 01-08-2024

    *
   **
  ***
 ****
*****

#Program to print X shape inside a hollow Square

print('Program to print X shape inside Hollow Square')
number_of_lines = int(input('Enter the number of lines: '))
for i in range(number_of_lines):
    for j in range(number_of_lines):
        if i == 0 or i == number_of_lines-1 or j == 0 or j == number_of_lines-1 or i == j or j == number_of_lines-i-1:
            print('* ', end='')
        else:
            print('  ', end='')
    print()
--------------------------------------
A number is Prime only if it has 2 factors and only 2 factors. 1 is not a Prime number because it has only 1 factor which is itself.

10 is not a Prime number because it has 1, 2, 5 and 10 as factors.

Now to check if a number is Prime, we must divide the number N from 2 to N-1.
However, we all know that any number (N) is fully divisible (with integer quotient) only by the numbers upto N/2.
For example, 50 is fully divisible by some number only upto 25.
However we also observe that a number (N) need to be dfivided by numbers only upto ciel(sqrt(N)) to check if it is Prime.
If N is 50,
sqrt(50) is 7.1
ciel(7.1) is 8

Read N
prime = true # assume the number N is Prime
for i from 2 to ciel(sqrt(N)) do:
	if N % i is 0 then:
		print N is not Prime number
		prime = false
		break the loop
if prime then:
	print N is a Prime number
	
	

Read N
count=0
if N == 1:
	return 2
if N == 2:
	return 3
j = 4 # We shall check the number in 'j' is Prime on not
while count <= N:
	if checkIfPrime(j):
		count++
	if count == N:
	return j
	j++
-------------------------------------------------
#Program to check if a number is Prime
import math

def check_if_prime(num):
    for i in range(2, math.ceil(math.sqrt(num))+1):
        if num % i == 0:
            return False
    return True

input_number = int(input('Enter the number N, to print Nth Prime number: '))

j = 0
if input_number == 1:
    j = 2
elif input_number == 2:
    j = 3
else:
    count = 2
    j = 4 #Number in J is checked if Prime or not
    while count <= input_number:
        if check_if_prime(j):
            count += 1
        if count == input_number:
            break
        j += 1
print(f'{input_number}th Prime number is {j}')
------------------------------------
Program to print the Nth Fibo term (1st Fibo term is 1 and 2nd is 2)

term_number = int(input ("Enter N to print the Nth Fibo term: "))  

def find_nth_fibo_term(n):
    thrid_number = 0
    first_number  = 1
    second_number = 2  
    if n == 1:
        thrid_number = 1
    elif n == 2:
        thrid_number = 2
    else:
        thrid_number  = 0
        count = 2
        while count <= n:
            thrid_number = first_number + second_number
            count += 1
            if count == n:
                return thrid_number
            first_number = second_number
            second_number = thrid_number
    return thrid_number

if term_number <= 0:  
    print ("Please enter a positive integer, the given number is not valid")
else: 
    print (f'The {term_number}th Fibo number is ', find_nth_fibo_term(term_number))
--------------------------------------------------
Syllabus:
Day1 we focused on programming building blocks and pseudocode.
Day2 was basic problem solving using Python and pseudocode.
Day3 problem solving on Loops and Arrays (Lists)
Day4 Python data structures and string and problem solving
Day5 PDB and Important Python modules like sys, math, numpy
Day6 Basic searching and sorting Algoriths and OOP.
------------------------------------------
Find sum of the series:
1 - n + n(2) - n(3) + ..... m terms 

i/p: n and m
n is value of the term and m is number of terms.
What is the term? n power Zero
2nd term is n power 1

-1 power Even number is +1
-1 power Odd  number is -1

Read N
Read M
sum_of_terms = 0
for i in range(0, M):
	term = (n power i) * (-1 power i)
	sum += term
	
sum = 2 + 7 * 9

sum = 2 ** 3 ** 2
L->R: 8 ** 2  is 64
R->L: 2 ** 9  is 512

Remember, the Associtivity of ** operator is R to L
Hence,
-1 ** 0 is evaluated like this: -( 1 ** 0) = - (+1) = -1
(-1) ** 0 is evaluated as it is, hence it is +1


Find sum of the series:
n - n(2)/3 + n(4)/5 - n(8)/7 + ..... upto m terms  and (1<=n<=5) and (2<m<10)

def findSumOfTerms(n, m):
    sum_of_terms = 0
    for i in range(1, m+1):
        numerator = n ** 2 ** i
        denominator = (2*i-1)
        term = (numerator/denominator) * ((-1) ** (i-1))
        sum_of_terms += term


number_of_terms = int(input('Enter number of terms of the series (>= 2 and < 10): '))

term_base_value = int(input('Enter base value of every term: '))

sum_of_terms = findSumOfTerms(term_base_value, number_of_terms)

print(f'Sum of th terms is {sum_of_terms}')
---------------------------------------------------
Array/List Problems:

def print_list(numbers):
    for element in numbers:
        print(element)

def modify_list1(numbers):
    for element in numbers:
        element = element + 1

def modify_list2(numbers):
    for i in range(len(numbers)):
        numbers[i] = numbers[i] - 1

numbers1 = [] # one way to create an empty list
numbers2 = list() # one way to create an empty list
numbers3 = [2, 4, '5', ['abc', 'xyz'], 5.5] # one way to create an list
# numbers4 = list(1, 2, 4, '7', 5.5) # one way to create an empty list
numbers5 = [1, 2, 4, 7, 5.5]
numbers4 = list(numbers5)
print_list(numbers4)
print('Numbers3 List is ', numbers3)
print('Before modification, numbers5 = ', numbers5)
print('Before modification, numbers4 = ', numbers4)
modify_list1(numbers5)
modify_list2(numbers4)
print('After modification, numbers5 = ', numbers5)
print('After modification, numbers4 = ', numbers4)

print('numbers3 2nd element = ', numbers3[1])
print('numbers3 4th element = ', numbers3[3])
print('numbers3 1st element in 4th element = ', numbers3[3][0])

Assignment:
Go to the Python docs and read and learn all the methods of list class.
G search: python list methods python docs

squares = []
for i in range(10):
	squares.append(i * i)
print('Squares = ', squares)
--------------------------
List Comprehension
[x**2 for x in range(10)]

step1: [ ]
We are saying, we need a list

step2: x ** 2
elements of the list will be x ** 2

step3: for x in range(10)
values for x will be supplied from the for loop
-----------------------------
squares2 = [x**2 for x in range(10)]
print('Squares2 = ', squares2)
--------------------------------------
Using Map and Lambda Function:

squares3 = list(map(lambda x: x**2, range(10)))
print('Squares3 = ', squares3)